# -*- coding: utf-8 -*-
"""Tugas Modul 7 PBF(2).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1C3812qjO6ENKMLx2bHTT6C-pw_dlvXTs

# Tugas Kelompok

Download data disini :

https://drive.google.com/file/d/1yRYkjsF9CuC4RXueZQCHuJnXRSXliBjS/view?usp=sharing

Langkah dalam menyelesaikan tugas ini adalah:

* Buatlah terlebih dahulu list dictionary yang kosong

* Buatlah looping untuk melakukan kalkulasi dengan fungsi Map atau Filter atau Reduce kemudian simpan ke dalam list dictionary yang sudah di definisikan

Bagian 1: Model Populasi Polisi Detroit

Baca data dari file Laporan Polisi Detroit menggunakan modul csv dan terjemahkan data ke dalam daftar dictionary. Menggunakan Filter dengan fungsi lambda untuk mengecualikan dictionary (baris CSV) yang memiliki data yang hilang di kolom Zip, atau kolom Neighborhood. Dengan menggunakan fungsi lambda dan Reduce, hitung total waktu respons rata-rata, waktu pengiriman rata-rata, dan total waktu rata-rata untuk kepolisian Detroit.

Bagian 2: Modelkan Neighborhood Samples

Menggunakan fungsi lambda dan map, atau lambda dan Filter, bagi list dictionary menjadi list dictionary yang lebih kecil yang dipisahkan oleh neighborhood. Dengan menggunakan lambda dan Reduce, temukan total waktu respons rata-rata untuk setiap neighborhood, waktu pengiriman rata-rata untuk setiap neighborhood, dan total waktu rata-rata untuk setiap neighborhood dan simpanlah ke dalam list dictionary. Tambahkan item dictioanary untuk menyertakan data populasi untuk semua Detroit dalam daftar gabungan Anda.

Bagian 3: Buat file Output JSON

Menggunakan modul JSON, format list dictionary Anda sebagai JSON
"""

# List dictionary kosong untuk menyimpan data
list_dictionary = []

import csv
import sys
from functools import reduce

# Fungsi untuk membaca data dari file CSV dan menerjemahkannya ke dalam daftar dictionary
def baca_data(file_path):
    with open(file_path, newline='', encoding='utf-8') as csvfile:
        reader = csv.DictReader(csvfile)
        data_list = [row for row in reader]
    return data_list

# Minta pengguna untuk memasukkan nama file CSV
file_path = input("Masukkan nama file CSV: ")

# Baca data dari file CSV dan menerjemahkannya ke dalam daftar dictionary
data_polisi_detroit = baca_data(file_path)

# Fungsi untuk menghitung total respons time dari suatu data
def hitung_total_respons(data):
    total_respons_time = data['totalresponsetime']
    return float(total_respons_time) if total_respons_time else 0.0

# Melakukan kalkulasi menggunakan fungsi map
total_respons_per_data = list(map(hitung_total_respons, data_polisi_detroit))

# Simpan hasil ke dalam list dictionary
for index, data in enumerate(data_polisi_detroit):
    list_dictionary.append({
        'index': index,
        'total_respons': total_respons_per_data[index]
    })

# Tampilkan hasil
print(list_dictionary)

#Bagian 1: Model Populasi Polisi Detroit

# Filter untuk mengecualikan baris dengan data yang hilang di kolom Zip atau kolom Neighborhood
data_polisi_detroit = list(filter(lambda x: x['zip_code'] != '' and x['neighborhood'] != '', data_polisi_detroit))

# Fungsi lambda untuk menghitung total waktu respons, waktu pengiriman, dan total waktu
total_respons = reduce(lambda x, y: x + float(y['totalresponsetime']) if y['totalresponsetime'] else x, data_polisi_detroit, 0)
total_pengiriman = reduce(lambda x, y: x + float(y['dispatchtime']) if y['dispatchtime'] else x, data_polisi_detroit, 0)
total_waktu = reduce(lambda x, y: x + float(y['totaltime']) if y['totaltime'] else x, data_polisi_detroit, 0)

# Hitung rata-rata waktu respons, waktu pengiriman, dan total waktu
rata_respons = total_respons / len(data_polisi_detroit)
rata_pengiriman = total_pengiriman / len(data_polisi_detroit)
rata_waktu = total_waktu / len(data_polisi_detroit)

# Tampilkan hasil
print("Total waktu respons rata-rata untuk kepolisian Detroit:", rata_respons)
print("Total waktu pengiriman rata-rata untuk kepolisian Detroit:", rata_pengiriman)
print("Total waktu rata-rata untuk kepolisian Detroit:", rata_waktu)

#Bagian 2: Modelkan Neighborhood Samples

from functools import reduce

# Fungsi lambda untuk memisahkan data berdasarkan neighborhood
separate_neighborhood = lambda neighborhood, data: list(filter(lambda x: x["neighborhood"] == neighborhood, data))

# Fungsi lambda untuk menghitung total waktu respons rata-rata
calculate_avg_response_time = lambda acc, item: acc + (float(item["totalresponsetime"]) if item["totalresponsetime"] else 0) / len(data_polisi_detroit)

# Fungsi lambda untuk menghitung total waktu pengiriman rata-rata
calculate_avg_delivery_time = lambda acc, item: acc + (float(item["traveltime"]) if item["traveltime"] else 0) / len(data_polisi_detroit)

# Fungsi lambda untuk menghitung total waktu rata-rata
calculate_avg_total_time = lambda acc, item: acc + ((float(item["totalresponsetime"]) if item["totalresponsetime"] else 0) + (float(item["traveltime"]) if item["traveltime"] else 0)) / len(data_polisi_detroit)

# Memisahkan data berdasarkan neighborhood
neighborhoods_data = list(map(lambda x: separate_neighborhood(x, data_polisi_detroit), set(map(lambda x: x["neighborhood"], data_polisi_detroit))))

# Menghitung total waktu respons rata-rata, waktu pengiriman rata-rata, dan total waktu rata-rata untuk setiap neighborhood
results = []
for neighborhood_data in neighborhoods_data:
    avg_response_time = round(reduce(calculate_avg_response_time, neighborhood_data, 0), 2)
    avg_delivery_time = round(reduce(calculate_avg_delivery_time, neighborhood_data, 0), 2)
    avg_total_time = round(reduce(calculate_avg_total_time, neighborhood_data, 0), 2)
    results.append({
        "neighborhood": neighborhood_data[0]["neighborhood"],
        "avg_response_time": avg_response_time,
        "avg_delivery_time": avg_delivery_time,
        "avg_total_time": avg_total_time
    })

# Menambahkan data populasi untuk semua Detroit ke dalam daftar gabungan
results.append({"neighborhood": "Detroit", "population": "Data populasi Detroit"})

# Output hasil
print(results)

#Bagian 2# Memisahkan list dictionary berdasarkan neighborhood menggunakan fungsi lambda dan filter
# Memisahkan list dictionary berdasarkan neighborhood menggunakan fungsi lambda dan map
neighborhood_samples = {}

# Fungsi untuk memisahkan data berdasarkan neighborhood
def split_by_neighborhood(data):
    neighborhoods = set(map(lambda x: x['neighborhood'], data))
    for neighborhood in neighborhoods:
        neighborhood_samples[neighborhood] = list(filter(lambda x: x['neighborhood'] == neighborhood, data))

# Memanggil fungsi untuk memisahkan data berdasarkan neighborhood
split_by_neighborhood(data_polisi_detroit)

from functools import reduce

# Fungsi lambda dan Reduce untuk menghitung total waktu respons, waktu pengiriman, dan total waktu untuk setiap neighborhood
for neighborhood, samples in neighborhood_samples.items():
    total_respons = reduce(lambda x, y: x + float(y['totalresponsetime']) if 'totalresponsetime' in y and y['totalresponsetime'] else x, samples, 0)
    total_pengiriman = reduce(lambda x, y: x + float(y['dispatchtime']) if 'dispatchtime' in y and y['dispatchtime'] else x, samples, 0)
    total_waktu = reduce(lambda x, y: x + float(y['totaltime']) if 'totaltime' in y and y['totaltime'] else x, samples, 0)
    rata_respons = total_respons / len(samples)
    rata_pengiriman = total_pengiriman / len(samples)
    rata_waktu = total_waktu / len(samples)
    neighborhood_samples[neighborhood]['total_respons_rata_rata'] = rata_respons
    neighborhood_samples[neighborhood]['total_pengiriman_rata_rata'] = rata_pengiriman
    neighborhood_samples[neighborhood]['total_waktu_rata_rata'] = rata_waktu

# Menambahkan item dictionary untuk menyertakan data populasi untuk seluruh Detroit dalam daftar gabungan
total_respons_detroit = sum(float(sample['totalresponsetime']) if 'totalresponsetime' in sample and sample['totalresponsetime'] else 0 for sample in data_polisi_detroit)
total_pengiriman_detroit = sum(float(sample['dispatchtime']) if 'dispatchtime' in sample and sample['dispatchtime'] else 0 for sample in data_polisi_detroit)
total_waktu_detroit = sum(float(sample['totaltime']) if 'totaltime' in sample and sample['totaltime'] else 0 for sample in data_polisi_detroit)
rata_respons_detroit = total_respons_detroit / len(data_polisi_detroit)
rata_pengiriman_detroit = total_pengiriman_detroit / len(data_polisi_detroit)
rata_waktu_detroit = total_waktu_detroit / len(data_polisi_detroit)

neighborhood_samples['All Detroit'] = {
    'total_respons_rata_rata': rata_respons_detroit,
    'total_pengiriman_rata_rata': rata_pengiriman_detroit,
    'total_waktu_rata_rata': rata_waktu_detroit
}

# Tampilkan hasil
print("Hasil perhitungan untuk setiap neighborhood:")
for neighborhood, data in neighborhood_samples.items():
    print(f"Neighborhood: {neighborhood}")
    print(f"Total waktu respons rata-rata: {data['total_respons_rata_rata']}")
    print(f"Total waktu pengiriman rata-rata: {data['total_pengiriman_rata_rata']}")
    print(f"Total waktu rata-rata: {data['total_waktu_rata_rata']}")
    print()

#Nomor 3
import json

# Simpan list dictionary sebagai file JSON
with open('output.json', 'w') as file:
    json.dump(neighborhood_samples, file)

print("Data telah disimpan sebagai file JSON.")